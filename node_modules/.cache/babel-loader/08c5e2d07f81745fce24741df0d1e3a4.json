{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\n\nconst useHttp = applyData => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async requestConfig => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [applyData]); // return these so the components that call the function have access to that. Because we use the same names, we can return like this (instead of isLoading : isLoading for example)\n\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useHttp;","map":{"version":3,"names":["useCallback","useState","useHttp","applyData","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["C:/Users/chloe/OneDrive/Bureau/Projets/CUSTOM HOOKS/v2/src/hooks/useHttp.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nconst useHttp = (applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback(async (requestConfig) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : 'GET',\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  }, [applyData]);\r\n\r\n  // return these so the components that call the function have access to that. Because we use the same names, we can return like this (instead of isLoading : isLoading for example)\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAIC,SAAD,IAAe;EAAA;;EAC7B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;EAEA,MAAMO,WAAW,GAAGR,WAAW,CAAC,MAAOS,aAAP,IAAyB;IACvDJ,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR;;IACA,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,aAAa,CAACG,GAAf,EAAoB;QAC9CC,MAAM,EAAEJ,aAAa,CAACI,MAAd,GAAuBJ,aAAa,CAACI,MAArC,GAA8C,KADR;QAE9CC,OAAO,EAAEL,aAAa,CAACK,OAAd,GAAwBL,aAAa,CAACK,OAAtC,GAAgD,EAFX;QAG9CC,IAAI,EAAEN,aAAa,CAACM,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeR,aAAa,CAACM,IAA7B,CAArB,GAA0D;MAHlB,CAApB,CAA5B;;MAMA,IAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;MACAlB,SAAS,CAACiB,IAAD,CAAT;IACD,CAbD,CAaE,OAAOE,GAAP,EAAY;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;IACD;;IACDlB,YAAY,CAAC,KAAD,CAAZ;EACD,CApB8B,EAoB5B,CAACF,SAAD,CApB4B,CAA/B,CAJ6B,CA0B7B;;EACA,OAAO;IACLC,SADK;IAELE,KAFK;IAGLE;EAHK,CAAP;AAKD,CAhCD;;GAAMN,O;;AAkCN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}